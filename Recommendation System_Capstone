library(methods)
library(recommenderlab)
library(data.table)
library(ggplot2)
library(knitr)
library(Binarize)
library(readxl)
library(dplyr)
library(caret)
library(caTools)
# library(lubridate)

setwd("C:/Users/563525/Desktop/Capstone")
df_data <- read_xlsx("Capstone Dataset.xlsx",sheet = "Transaction")
attach(df_data)
df_data_orig <- df_data

df_data <- as.data.table(df_data)
View(df_data)
df_data <- df_data[`Customer Type`=="Loyal",]
df_data_loyal <- df_data

#### start
df_data <- df_data_loyal

# Date conversion
#  Assuming all the transaction happened in First day of the month
df_data_loyal$date <- as.Date(paste("18",df_data_loyal$Month,"01",sep="-"),"%y-%B-%d")
df_data_loyal <- na.omit(df_data_loyal)

# Create a Item Dictionary itemCode
setkeyv(df_data_loyal, c('Brand' , 'Product'))
itemCode <- unique(df_data_loyal[, c('Brand' , 'Product')])
setkeyv(df_data_loyal, NULL)

# Creating a view how many times a customer has purchased a product
df_train_ori <- dcast(df_data_loyal, Cust_ID ~ Product, 
                      value.var = 'Quantity',
                      fun.aggregate = sum, fill=0)

# just changing the NA fields to 0
for (i in names(df_train_ori))
  df_train_ori[is.na(get(i)), (i):=0]

# write.csv(df_train_ori,"Customer behaviour.csv")

# Converting the data to a sparseMatrix
df_train <- as.matrix(df_train_ori)

# To make sure that the prodcut has been sold atleast 20 times or person bought for atleast 20 times
df_train <- df_train[rowSums(df_train_ori[,-1]) >= 20,colSums(df_train_ori[,-1]) >= 20] 

#  The data is changed as 0 and 1
df_train <- binarize(as(df_train, "realRatingMatrix"), minRatin = 1)


# Splitting train and test data
which_train <- sample(x = c(TRUE, FALSE), size = nrow(df_train),replace = TRUE, prob = c(0.8, 0.2))
test_set <- df_train[!which_train]
training_set <- df_train[which_train]

View(test_set@data@data@p) # Customer ID

# To get the entries for the recommender lab
# recommender_models <- recommenderRegistry$get_entries(dataType ="binaryRatingMatrix")
# recommender_models$IBCF_binaryRatingMatrix$parameters

# Recommendation Algorithm on trainning data
# learn from here
method <- 'IBCF'
parameter <- list(method = 'Jaccard')
n_recommended <- 5
n_training <- 1000

recc_model <- Recommender(data = training_set, method = 'IBCF', parameter = 'Jaccard')
model_details <- getModel(recc_model)

# Prediction
recc_predicted <-predict(object = recc_model, newdata=test_set,n = n_recommended, type="topNList")
as(recc_predicted,"list")[1:5]

Cust_ID <-  df_train_ori[,1] 
user_1 <- Cust_ID[as.integer(names(recc_predicted@items[1]))] #Not understanding

vvv <- recc_predicted@items[[1]]
vvv <- rownames(model_details$sim)[vvv]
itemCode[vvv]

user_1_buy <- df_data[Cust_ID==user_1, sum(Quantity), by=Brand]
merge(itemCode,user_1_buy, by='Brand')

